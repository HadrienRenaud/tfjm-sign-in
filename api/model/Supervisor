const knex = require('./database');

class Participant {
    static getAll() {
        return knex.from('supervisors').select('*')
    }

    static getById(id) {
        return knex
            .from('supervisors')
            .select('*')
            .where('id', '=', id)
            .then((rows) => {
                if (rows.length === 0)
                    return false;
                else
                    return rows[0];
            })
    }

    static getByTeam(team) {
        return knex.from('supervisors').select('*').where('team', '=', team)
    }

    static getTeamById(id) {
        return knex
            .from('supervisors')
            .select('team')
            .where('id', '=', id)
            .then((rows) => {
                if (rows.length === 0)
                    return false;
                else
                    return rows[0];
            })
    }

    static authorizedKeys = ["name", "firstname", "email", "profession", "presence"]

    static updatable(participant) {
        let res = {};
        participant.keys
            .reduce((k) => (this.authorizedKeys.indexOf(k) > -1))
            .forEach((item) => {
                res[item] = participant[item]
            });
        return res;
    }

    static alterById(participant) {
        return knex('supervisors')
            .where('id', '=', participant.id)
            .update(updatable(participant))
            .then((rows) => {
                if (rows.length === 0)
                    return false;
                else
                    return rows[0];
            });
    }

    static createById(participant) {
        return knex('supervisors')
            .insert(participant)
            .then((rows) => {
            if (rows.length === 0)
                return false;
            else
                return rows[0];
        })
    }
}


export default Participant;
